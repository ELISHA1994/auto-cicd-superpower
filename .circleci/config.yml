version: 2.1

orbs:
  slack: circleci/slack@4.10.1
parameters:
  workflow_id:
    type: string
    default: '${CIRCLE_WORKFLOW_ID}'

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudforation by workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.workflow_id >>"
            aws cloudformation delete-stack \
            --stack-name udapeople-backend-<<parameters.workflow_id>>
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack \
            --stack-name udapeople-frontend-<<parameters.workflow_id>>

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [ frontend-build ]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [ frontend/node_modules ]
          key: frontend-build


  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [ backend-build ]
      - run:
          name: Back-end build
          command: |
            # Your code here
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [ backend/node_modules ]
          key: backend-build

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm run test
      - slack/notify:
          channel: C03PGL9NJE9
          event: fail
          template: basic_fail_1

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run test
      - slack/notify:
          channel: C03PGL9NJE9
          event: fail
          template: basic_fail_1

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - slack/notify:
          channel: C03PGL9NJE9
          event: pass
          template: success_tagged_deploy_1
      - slack/notify:
          channel: C03PGL9NJE9
          event: fail
          template: basic_fail_1

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend scan
          command: |
            cd backend
            npm install
            npm update mkdirp --depth 6
            npm install --save-dev webpack@5.73.0
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - slack/notify:
          channel: C03PGL9NJE9
          event: pass
          template: success_tagged_deploy_1
      - slack/notify:
          channel: C03PGL9NJE9
          event: fail
          template: basic_fail_1

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exists
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
      - run:
          name: Add the EC2 instance IP to the Ansible inventory
          command: |
            echo $(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --output text) >> ~/project/.circleci/ansible/inventory.txt
            cat ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      - image: python:3.10-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - '28:c7:5e:00:37:4b:08:24:3b:fd:7b:9d:59:4e:92:70'
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip ansible aws-cli
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Configure backend
          command: |
            # add environment variables to server
            echo ENVIRONMENT=production > backend/.env
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> backend/.env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> backend/.env
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> backend/.env
            echo TYPEORM_HOST=$TYPEORM_HOST >> backend/.env
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> backend/.env
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> backend/.env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> backend/.env
            echo TYPEORM_PORT=$TYPEORM_PORT >> backend/.env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> backend/.env
            cat backend/.env
            
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}



workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
